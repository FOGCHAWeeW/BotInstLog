import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from datetime import datetime
from aiogram.types.web_app_info import WebAppInfo

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = '7191553960:AAHexyqtjtST84zyAy9X9NDqO_NFYFkXmwk'  # –í—Å—Ç–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
MANAGER_ID = '7330150303'  # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class OrderState(StatesGroup):
    waiting_for_store = State()
    waiting_for_product_info = State()
    waiting_for_size = State()
    confirming_order = State()

# –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤

stores = ["POIZON", "Alibaba", "Taobao", "95"]

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["‚úÖ–°–î–ï–õ–ê–¢–¨ –ó–ê–ö–ê–ó", "‚öôÔ∏è–ü–û–ú–û–©–¨"]
    keyboard.add(*buttons)
    #keyboard.add(types.KeyboardButton('–û–¢–ö–†–´–¢–¨ APP', web_app=WebAppInfo(url='https://www.poizon.com/')))
    photoZastav = 'zstavTG.jpg'
    with open(photoZastav, 'rb') as photo:
        await bot.send_photo(message.from_user.id, photo, caption='üî•Wassup!'
                                                                   '\n‚úÖ–ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –ö–∏—Ç–∞—è'
                                                                   '\nüïíÔ∏è–ù–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 8:00 –¥–æ 21:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'
                                                                   '\n‚ùóÔ∏è–í–ø–µ—Ä—ë–¥ ‚Äì —ç—Ç–æ –Ω–µ —Å–ª–æ–∂–Ω–æ', reply_markup=keyboard)
    # await message.answer('üî•Wassup!'
    #                  '\n‚úÖ–ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –ö–∏—Ç–∞—è'
    #                  '\nüïíÔ∏è–ù–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 8:00 –¥–æ 21:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'
    #                  '\n‚ùóÔ∏è–í–ø–µ—Ä—ë–¥ ‚Äì —ç—Ç–æ –Ω–µ —Å–ª–æ–∂–Ω–æ', reply_markup=keyboard)





@dp.message_handler(lambda message: message.text == "‚úÖ–°–î–ï–õ–ê–¢–¨ –ó–ê–ö–ê–ó")
async def choose_store(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for store in stores:
        keyboard.add(store)
    #keyboard.add("‚¨ÖÔ∏è–ù–ê–ó–ê–î –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
    await message.answer("‚ú®–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=keyboard)
    await OrderState.waiting_for_store.set()

@dp.message_handler(lambda message: message.text in stores, state=OrderState.waiting_for_store)
async def get_product_info(message: types.Message, state: FSMContext):
    await state.update_data(chosen_store=message.text)


    photoHelp95 = 'help95.jpg'
    photoHelpAlibaba = 'helpAlibaba.jpg'
    photoHelpPoizon = 'helpPoizon.jpg'
    photoHelpTaobao = 'helpTaobao.jpg'
    if message.text == 'POIZON':
        keyboardP = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bPoizon = types.KeyboardButton('üî•–û–¢–ö–†–´–¢–¨ POIZON', web_app=WebAppInfo(url='https://www.poizon.com/'))
        keyboardP.add(bPoizon)
        with open(photoHelpPoizon, 'rb') as photo:
            await bot.send_photo(message.from_user.id, photo,
                                 caption=f"‚úÖ–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω: {message.text}\nüéØ–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboardP)

    if message.text == 'Alibaba':
        keyboardA = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bAlibaba = types.KeyboardButton('üî•–û–¢–ö–†–´–¢–¨ Alibaba', web_app=WebAppInfo(url='https://www.alibaba.com/'))
        keyboardA.add(bAlibaba)
        with open(photoHelpAlibaba, 'rb') as photo:
            await bot.send_photo(message.from_user.id, photo,
                                 caption=f"‚úÖ–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω: {message.text}\nüéØ–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboardA)

    if message.text == 'Taobao':
        keyboardT = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bTaobao = types.KeyboardButton('üî•–û–¢–ö–†–´–¢–¨ Taobao', web_app=WebAppInfo(url='https://www.taobao.com/'))
        keyboardT.add(bTaobao)
        with open(photoHelpTaobao, 'rb') as photo:
            await bot.send_photo(message.from_user.id, photo,
                                 caption=f"‚úÖ–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω: {message.text}\nüéØ–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboardT)

    if message.text == '95':
        with open(photoHelp95, 'rb') as photo:
            await bot.send_photo(message.from_user.id, photo,
                                 caption=f"‚úÖ–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω: {message.text}\nüéØ–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


    # await message.answer(f"‚úÖ–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω: {message.text}\nüéØ–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await OrderState.waiting_for_product_info.set()

@dp.message_handler(state=OrderState.waiting_for_product_info)
async def get_size(message: types.Message, state: FSMContext):
    await state.update_data(product_info=message.text)
    await message.answer("üéØ–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")
    await OrderState.waiting_for_size.set()

@dp.message_handler(state=OrderState.waiting_for_size)
async def confirm_order(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    chosen_store = user_data.get('chosen_store')
    product_info = user_data.get('product_info')
    size = message.text
    await state.update_data(size=size)

    order_details = f"üìç–ú–∞–≥–∞–∑–∏–Ω: {chosen_store}\nüìç–¢–æ–≤–∞—Ä: {product_info}\nüìç–†–∞–∑–º–µ—Ä: {size}"
    await message.answer(f"‚ùóÔ∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑:\n{order_details}\n‚úÖ–ù–∞–∂–º–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üëç–î–ê", "üëé–ù–ï–¢")
    await message.answer("üÜó–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await OrderState.confirming_order.set()

@dp.message_handler(lambda message: message.text == "üëç–î–ê", state=OrderState.confirming_order)
async def order_confirmed(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    user_data = await state.get_data()
    size = user_data.get('size')
    chosen_store = user_data.get('chosen_store')
    product_info = user_data.get('product_info')
    #size = message.text
    timeDATA = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    kodeTimeDATA = datetime.now().strftime("%Y%m%d%H%M%S")
    await bot.send_message(MANAGER_ID, f"–í—Ä–µ–º—è: {timeDATA}\n–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n–ú–∞–≥–∞–∑–∏–Ω: {chosen_store}\n–¢–æ–≤–∞—Ä: {product_info}\n–†–∞–∑–º–µ—Ä: {size}"
                                       f"\n–ö–û–î –ó–ê–ö–ê–ó–ê: {kodeTimeDATA}")
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ https://t.me/managerinstlog'
                         f'\nüìç–ö–æ–¥ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {kodeTimeDATA}'
                         'üìç–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É')
    #await message.answer('üìç–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É'
    #                                                      '\nüïíÔ∏è–í —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä'
    #                                                      f'\n‚òéÔ∏è–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤–∞–º –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫—É: https://t.me/managerinstlog'
    #                                                        '\n----------'
    #                                                        '\n‚ùóÔ∏è–ï–°–õ–ò –ß–¢–û –¢–û –°–õ–£–ß–ò–õ–û–°–¨ –° –ó–ê–ö–ê–ó–û–ú –ü–†–û–°–¢–û –ù–ê–ü–ò–®–ò–¢–ï –ö–û–î –í–ê–®–ï–ì–û –ó–ê–ö–ê–ó–ê –í –¢–ï–•-–ü–û–î–î–ï–†–ñ–ö–£'
    #                                                        f'\nüìç–ö–æ–¥ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {kodeTimeDATA}')

    await state.finish()
    await start_command(message)

@dp.message_handler(lambda message: message.text == "üëé–ù–ï–¢", state=OrderState.confirming_order)
async def order_cancelled(message: types.Message, state: FSMContext):
    await message.answer("‚ùå–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\nüÜó–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()
    await start_command(message)

@dp.message_handler(lambda message: message.text == "‚öôÔ∏è–ü–û–ú–û–©–¨")
async def help_command(message: types.Message):
    await message.answer("üß∞–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\nüí°–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: https://t.me/managerinstlog")
    #await message.answer("–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @your_manager_username.", reply_markup=types.ReplyKeyboardRemove())
# @dp.message_handler(lambda message: message.text == "–ö–æ—Ä–∑–∏–Ω–∞")
# async def view_cart(message: types.Message):
#     await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'.", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text, state='*')
async def unknown_message(message: types.Message):
    await message.answer("–ß—ë—Ç —è –Ω–µ –ø–æ–Ω—è–ª, –æ —á—ë–º —Ç—ã\n–ù–ê–ñ–ú–ò –°–Æ–î–ê üëâ /start")

    
@dp.message_handler(commands=['open'])
async def open_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", web_app=WebAppInfo(url='https://pw4227.craftum.io/'))
    keyboard.add(button)
    
    await message.answer("üì± –í –ü–†–ò–õ–û–ñ–ï–ù–ò–ò –£–î–û–ë–ù–ï–ï", reply_markup=keyboard)
    

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
